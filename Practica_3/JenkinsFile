pipeline {
    agent any

    tools {
        nodejs "node"
        maven "Maven 3.8.4"
        gcloud "gcloud"
        jdk 'java'
        terraform 'Terraform'
    }

    environment {
        DOCKERHUB_CREDENTIALS=credentials('docker-hub-cred')
        PRIV_KEY=credentials('PRIV_KEY')
    }

    stages {
        stage ('git configure'){
            steps {
                git branch : 'main', url : 'https://github.com/sicmmar/SA-Practicas'
            }
        }

        stage ('build with npm & docker') {
            steps {
                dir('Practica_2/App'){
                    sh 'npm install'
                    sh 'docker rmi app-practica6:latest'
                    sh 'docker build -t app-practica6:latest .'
                    sh 'docker ps -a'
                }
            }
        }

        stage ('test with karma') {
            steps {
                dir('Practica_2/App'){
                    sh 'export CHROME_BIN=/usr/bin/chromium'
                    sh 'npm run ng test -- --no-watch --no-progress --browsers=ChromeHeadlessCI'
                }
            }
        }

        stage ('release with npm') {
            steps {
                dir('Practica_2/App'){
                    sh 'npm run ng build --configuration="production" --optimization --build-optimizer'
                }
            }
        }

        stage ('deploy with docker hub') {
            steps {
                dir('Practica_2/App'){
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    sh 'docker tag app-practica6:latest sicmmar/app-practica6:latest'
                    sh 'docker push sicmmar/app-practica6:latest'
                    sh 'docker ps -a'
                }
            }
        }

        stage ('operate with terraform') {
            steps {
                dir('Practica_7'){
                    sh 'terraform --version'
                    sh 'terraform init -reconfigure'
                    sh 'terraform validate'
                    sh 'terraform apply -input=false -auto-approve -var "privatekeypath=$PRIV_KEY" --destroy'
                    sh 'terraform plan -lock=false -var "privatekeypath=$PRIV_KEY" -out "planfile"'
                    sh 'terraform apply -lock=false -input=false "planfile"'
                }
            }
        }

        stage('monitor with sonarqube') {
            environment {
                scannerHome = tool 'ServerSonarQube'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'SonarToken', installationName: 'Practica4SonarQube') {
                    sh '''
                    ${scannerHome}/bin/sonar-scanner \
                    -D sonar.host.url=http://34.133.197.215:9000 \
                    -D sonar.projectKey=practica4 \
                    -D sonar.projectName=practica4 \
                    -D sonar.login=admin \
                    -D sonar.password=1897
                    '''
                }
            }
        }
    }
}